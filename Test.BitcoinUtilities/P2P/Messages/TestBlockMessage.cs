using System.IO;
using BitcoinUtilities.P2P;
using BitcoinUtilities.P2P.Messages;
using NUnit.Framework;

namespace Test.BitcoinUtilities.P2P.Messages
{
    public class TestBlockMessage
    {
        [Test]
        public void Test()
        {
            byte[] inBytes = new byte[]
                             {
                                 //block header
                                 0x01, 0x00, 0x00, 0x00, 0x6F, 0xE2, 0x8C, 0x0A, 0xB6, 0xF1, 0xB3, 0x72, 0xC1, 0xA6, 0xA2, 0x46,
                                 0xAE, 0x63, 0xF7, 0x4F, 0x93, 0x1E, 0x83, 0x65, 0xE1, 0x5A, 0x08, 0x9C, 0x68, 0xD6, 0x19, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x98, 0x20, 0x51, 0xFD, 0x1E, 0x4B, 0xA7, 0x44, 0xBB, 0xBE, 0x68, 0x0E,
                                 0x1F, 0xEE, 0x14, 0x67, 0x7B, 0xA1, 0xA3, 0xC3, 0x54, 0x0B, 0xF7, 0xB1, 0xCD, 0xB6, 0x06, 0xE8,
                                 0x57, 0x23, 0x3E, 0x0E, 0x61, 0xBC, 0x66, 0x49, 0xFF, 0xFF, 0x00, 0x1D, 0x01, 0xE3, 0x62, 0x99,
                                 //transactions
                                 0x01,
                                 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x04, 0xFF, 0xFF, 0x00, 0x1D, 0x01,
                                 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xF2, 0x05, 0x2A, 0x01, 0x00, 0x00, 0x00, 0x43, 0x41,
                                 0x04, 0x96, 0xB5, 0x38, 0xE8, 0x53, 0x51, 0x9C, 0x72, 0x6A, 0x2C, 0x91, 0xE6, 0x1E, 0xC1, 0x16,
                                 0x00, 0xAE, 0x13, 0x90, 0x81, 0x3A, 0x62, 0x7C, 0x66, 0xFB, 0x8B, 0xE7, 0x94, 0x7B, 0xE6, 0x3C,
                                 0x52, 0xDA, 0x75, 0x89, 0x37, 0x95, 0x15, 0xD4, 0xE0, 0xA6, 0x04, 0xF8, 0x14, 0x17, 0x81, 0xE6,
                                 0x22, 0x94, 0x72, 0x11, 0x66, 0xBF, 0x62, 0x1E, 0x73, 0xA8, 0x2C, 0xBF, 0x23, 0x42, 0xC8, 0x58,
                                 0xEE, 0xAC, 0x00, 0x00, 0x00, 0x00
                             };

            BlockMessage message;

            MemoryStream inStream = new MemoryStream(inBytes);
            using (BitcoinStreamReader reader = new BitcoinStreamReader(inStream))
            {
                message = BlockMessage.Read(reader);
            }

            Assert.That(message.BlockHeader.Version, Is.EqualTo(1));
            Assert.That(message.Transactions.Length, Is.EqualTo(1));
            Assert.That(message.Transactions[0].Inputs.Length, Is.EqualTo(1));
            Assert.That(message.Transactions[0].Outputs.Length, Is.EqualTo(1));
            Assert.That(message.Transactions[0].Outputs[0].Value, Is.EqualTo(5000000000));

            byte[] outBytes = BitcoinStreamWriter.GetBytes(message.Write);
            Assert.That(outBytes, Is.EqualTo(inBytes));
        }
    }
}