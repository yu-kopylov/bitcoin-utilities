using BitcoinUtilities.Scripts;
using NUnit.Framework;

namespace Test.BitcoinUtilities.Scripts
{
    [TestFixture]
    public class TestBitcoinScript
    {
        [Test]
        public void TestPayToPubkeyHash()
        {
            Assert.That(BitcoinScript.IsPayToPubkeyHash(null), Is.False);
            Assert.That(BitcoinScript.IsPayToPubkeyHash(new byte[0]), Is.False);

            Assert.That(BitcoinScript.GetAddressFromPubkeyScript(null), Is.Null);
            Assert.That(BitcoinScript.GetAddressFromPubkeyScript(new byte[0]), Is.Null);

            // this sample was taken from the output in the block 728
            byte[] sampleScript = new byte[] {0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC};
            string sampleAddress = "12higDjoCCNXSA95xZMWUdPvXNmkAduhWv";

            Assert.That(BitcoinScript.IsPayToPubkeyHash(sampleScript), Is.True);
            Assert.That(BitcoinScript.GetAddressFromPubkeyScript(sampleScript), Is.EqualTo(sampleAddress));

            // corrupt opcode
            byte[][] corruptOpcodeScripts =
                new byte[][]
                {
                    new byte[] {0x00, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0x00, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x00, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x00, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0x00}
                };

            foreach (byte[] script in corruptOpcodeScripts)
            {
                Assert.That(BitcoinScript.IsPayToPubkeyHash(script), Is.False);
                Assert.That(BitcoinScript.GetAddressFromPubkeyScript(script), Is.Null);
            }

            // extra byte
            byte[][] extraByteScripts =
                new byte[][]
                {
                    new byte[] {0x00, 0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0x00, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x00, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0x00, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x15, 0x00, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x00, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0x00, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC, 0x00}
                };

            foreach (byte[] script in extraByteScripts)
            {
                Assert.That(BitcoinScript.IsPayToPubkeyHash(script), Is.False);
                Assert.That(BitcoinScript.GetAddressFromPubkeyScript(script), Is.Null);
            }


            // missing byte
            byte[][] missingByteScripts =
                new byte[][]
                {
                    new byte[] {0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x13, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0xAC},
                    new byte[] {0x76, 0xA9, 0x14, 0x12, 0xAB, 0x8D, 0xC5, 0x88, 0xCA, 0x9D, 0x57, 0x87, 0xDD, 0xE7, 0xEB, 0x29, 0x56, 0x9D, 0xA6, 0x3C, 0x3A, 0x23, 0x8C, 0x88}
                };

            foreach (byte[] script in missingByteScripts)
            {
                Assert.That(BitcoinScript.IsPayToPubkeyHash(script), Is.False);
                Assert.That(BitcoinScript.GetAddressFromPubkeyScript(script), Is.Null);
            }
        }
    }
}