using BitcoinUtilities;
using NUnit.Framework;

namespace Test.BitcoinUtilities
{
    [TestFixture]
    public class TestBip38
    {
        [Test]
        public void TestEncode()
        {
            string address = "16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF";
            byte[] privateKey = new byte[] { 0x64, 0xEE, 0xAB, 0x5F, 0x9B, 0xE2, 0xA0, 0x1A, 0x83, 0x65, 0xA5, 0x79, 0x51, 0x1E, 0xB3, 0x37, 0x3C, 0x87, 0xC4, 0x0D, 0xA6, 0xD2, 0xA2, 0x5F, 0x05, 0xBD, 0xA6, 0x8F, 0xE0, 0x77, 0xB6, 0x6E };
            string password = "\u03D2\u0301\u0000\U00010400\U0001F4A9";
            byte[] expectedEncryptedKey = new byte[] { 0x01, 0x42, 0xC0, 0xF4, 0xE7, 0x75, 0xA8, 0x40, 0x20, 0xB1, 0xF0, 0xCA, 0x28, 0x53, 0x28, 0x7A, 0xCA, 0xC1, 0x1A, 0x43, 0x03, 0x2E, 0x27, 0x4E, 0x54, 0x36, 0x92, 0xBE, 0x5F, 0xA2, 0xB8, 0x54, 0x32, 0x67, 0x15, 0x43, 0xC1, 0xAC, 0x0E };
            
            byte[] encodedPrivateKey = Bip38.Encode(address, privateKey, password, false, false, false);
            Assert.That(encodedPrivateKey, Is.EquivalentTo(expectedEncryptedKey));
        }
    }
}
